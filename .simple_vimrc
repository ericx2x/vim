" Don't try to be vi compatible
set nocompatible

" Helps force plugins to load correctly when it is turned back on below
filetype off

" TODO: Load plugins here (pathogen or vundle)

" Turn on syntax highlighting
syntax on

" For plugins to load correctly
filetype plugin indent on

" TODO: Pick a leader key
let mapleader = "\<Space>"
noremap <leader>s :w<cr>

" Show line numbers
set number

" Show file stats
set ruler

" Blink cursor on error instead of beeping (grr)
set visualbell

" Encoding
set encoding=utf-8

" Whitespace
set wrap
set tabstop=8                   " an indentation every 4 columns
"set textwidth=79
"set formatoptions=tcqrn1
set shiftwidth=2
set softtabstop=2
set expandtab
"set noshiftround
set history=5000                " Store a ton of history (default is 20)


"Use system wide clipboard
set clipboard^=unnamed,unnamedplus " Use same clipboard as macOS/Linux

"Yank from the cursor to the end of the line, to be consistent with C and D.
nnoremap Y y$
 

" gist-vim {
     let g:gist_clip_command = 'pbcopy'
" }
  

"Paste faster doesn't seem to work though
set noswapfile

"paste without yanking (necessary to press p without grabbing text you dont want!)
vnoremap p "_dP
  
" paste fast leader key remap
nmap <leader>p "+p
    
"clearing highlighted search
nmap <silent> <leader>/ :nohlsearch<CR>
    
"delete with copying to vim clipboard
nmap x "_d
    


" Cursor motion
set scrolloff=3
"set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
runtime! macros/matchit.vim

" Move up/down editor lines
nnoremap j gj
nnoremap k gk

" Allow hidden buffers
set hidden

" Rendering
set ttyfast

" Status bar
set laststatus=2

" Last line
set showmode
set showcmd

" Searching
     set incsearch                   " find as you type search
set hlsearch                    " highlight search terms
"set ignorecase
"set smartcase
"set showmatch
"map <leader><space> :let @/=''<cr> " clear search

" Formatting
map <leader>q gqip

" Visualize tabs and newlines
set listchars=tab:▸\ ,eol:¬
" Uncomment this to enable by default:
" set list " To enable by default
" Or use your leader key + l to toggle on/off
map <leader>l :set list!<CR> " Toggle tabs and EOL

" Color scheme (terminal)
set t_Co=256
set background=dark
let g:solarized_termcolors=256
let g:solarized_termtrans=1
" put https://raw.github.com/altercation/vim-colors-solarized/master/colors/solarized.vim
" in ~/.vim/colors/ and uncomment:
" colorscheme solarized

"remap d and c to not cut highlighted text
nnoremap d "_d
vnoremap d "_d

"nnoremap c "_c
vnoremap c "_c

" Use '' to copy to clipboard much more reliably than "+y
vmap '' :w !pbcopy<CR><CR>


" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Setting up the directories {
  set backup                      " backups are nice ...
  if has('persistent_undo')
    set undofile                "so ispersistent undo ...
    set undolevels=1000  "maximum number of changes thatcan be undone
    set undoreload=10000 "maximum number lines to save for undo on a buffer reload
  endif
  au BufWinLeave *.* silent! mkview  "make vim save view (state) (folds, cursor, etc)
  au BufWinEnter *.* silent! loadview "make vim load view (state) (folds, cursor, etc)
"}
    
    

function! InitializeDirectories()
    let separator = "."
    let parent = $HOME
    let prefix = '.vim'
    let dir_list = {
    \ 'backup': 'backupdir',
    \ 'views': 'viewdir',
    \ 'swap': 'directory' }

    if has('persistent_undo')
        let dir_list['undo'] = 'undodir'
    endif

    for [dirname, settingname] in items(dir_list)
        let directory = parent . '/' . prefix . dirname . "/"
        if exists("*mkdir")
          if !isdirectory(directory)
              call mkdir(directory)
          endif
        endif
        if !isdirectory(directory)
          echo "Warning: Unable to create backup directory: " . directory
          echo "Try: mkdir -p " . directory
        else
          let directory = substitute(directory, " ", "\\\\ ", "g")
          exec "set " . settingname . "=" . directory
        endif
    endfor
endfunction
call InitializeDirectories()

"always open current file direcory when using :e 
autocmd BufEnter * silent! lcd %:p:h
